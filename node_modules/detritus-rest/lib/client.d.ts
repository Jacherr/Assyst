/// <reference types="node" />
import { URL } from 'url';
import { HTTPHeadersInterface } from './constants';
import { BasicRequestOptions, Request, RequestSettings } from './request';
import { Route } from './route';
export interface RequestRoute {
    method?: string;
    params?: {
        [key: string]: string;
    };
    path?: string;
    urlPath?: null;
}
export interface BeforeRequestOptions extends BasicRequestOptions {
    headers?: {
        [key: string]: string | undefined;
    };
    method?: string;
    path?: string;
    query?: {
        [key: string]: any;
    };
    route?: Route | RequestRoute;
    settings?: RequestSettings;
    url?: string | URL;
}
export interface ClientSettings {
    timeout?: number;
}
export interface ClientOptions {
    baseUrl?: string | URL;
    headers?: {
        [key: string]: string | undefined;
    };
    settings?: ClientSettings;
}
export declare class Client {
    baseUrl: string | URL;
    headers: HTTPHeadersInterface;
    settings: ClientSettings;
    constructor(options?: ClientOptions);
    createRequest(options?: BeforeRequestOptions | string): Promise<Request>;
    request(options?: BeforeRequestOptions | string): Promise<any>;
    delete(options?: BeforeRequestOptions | string): Promise<any>;
    get(options?: BeforeRequestOptions | string): Promise<any>;
    head(options?: BeforeRequestOptions | string): Promise<any>;
    options(options?: BeforeRequestOptions | string): Promise<any>;
    patch(options?: BeforeRequestOptions | string): Promise<any>;
    post(options?: BeforeRequestOptions | string): Promise<any>;
    put(options?: BeforeRequestOptions | string): Promise<any>;
}
export declare function appendQuery(url: URL, key: string, value: any): void;
