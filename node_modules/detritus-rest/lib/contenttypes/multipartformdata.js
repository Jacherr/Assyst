"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const LINE_BREAK = '\r\n';
function generateBoundary() {
    let boundary = '-'.repeat(26);
    for (let i = 0; i < 24; i++) {
        boundary += Math.floor(Math.random() * 10).toString(16);
    }
    return boundary;
}
class MultipartFormData {
    constructor(boundary) {
        this.boundary = boundary || generateBoundary();
        this.contentType = `${constants_1.SupportedContentTypes.MULTIPART_FORM_DATA}; boundary=${this.boundary}`;
        this.buffers = [];
        this.locked = false;
    }
    add(field, value, options) {
        if (this.locked) {
            throw new Error('Cannot add fields to a finished multipart form.');
        }
        if (typeof (options) === 'string') {
            options = { filename: options };
        }
        else {
            options = Object.assign({}, options);
        }
        if (typeof (value) === 'number') {
            value = String(value);
        }
        const data = [
            `--${this.boundary}`,
            [
                `Content-Disposition: form-data`,
                `name="${encodeURIComponent(field)}"`,
                options.filename && `filename="${encodeURIComponent(options.filename)}"`,
            ].filter((v) => v).join('; '),
        ];
        let contentType;
        if (value instanceof Buffer) {
            contentType = options.contentType;
            if (!contentType) {
                // lookup in mimetypes?
            }
            if (!contentType) {
                contentType = constants_1.SupportedContentTypes.APPLICATION_OCTET_STREAM;
            }
        }
        else if (typeof (value) === 'object') {
            contentType = constants_1.SupportedContentTypes.APPLICATION_JSON;
            value = Buffer.from(JSON.stringify(value));
        }
        else {
            contentType = options.contentType;
            value = Buffer.from(value);
        }
        if (contentType) {
            data.push(`Content-Type: ${contentType}`);
        }
        this.buffers.push(Buffer.from(LINE_BREAK + data.join(LINE_BREAK) + LINE_BREAK.repeat(2)));
        this.buffers.push(value);
    }
    done() {
        if (!this.locked) {
            this.locked = true;
            this.buffers.push(Buffer.from(`${LINE_BREAK}--${this.boundary}--`));
        }
        return this.buffers;
    }
}
exports.MultipartFormData = MultipartFormData;
