"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("http");
var ratelimitStatusCode = 429;
/**
 * The main fAPI error. If a request returns an invalid status code (non-200), it will be thrown as a fAPI error.
 */
var FapiError = /** @class */ (function (_super) {
    __extends(FapiError, _super);
    function FapiError(message, statusCode, request) {
        var _this = _super.call(this, message) || this;
        _this.statusCode = statusCode;
        _this.request = request;
        return _this;
    }
    return FapiError;
}(Error));
exports.FapiError = FapiError;
/**
 * An extension of FapiError that also contains ratelimit reset info and is only fired on responses with a http status code of 429.
 */
var RatelimitError = /** @class */ (function (_super) {
    __extends(RatelimitError, _super);
    function RatelimitError(ratelimitReset, request) {
        var _this = _super.call(this, http_1.STATUS_CODES[ratelimitStatusCode], ratelimitStatusCode, request) || this;
        _this.ratelimitReset = ratelimitReset;
        return _this;
    }
    return RatelimitError;
}(FapiError));
exports.RatelimitError = RatelimitError;
