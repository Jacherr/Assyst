/// <reference types="node" />
import { EventEmitter } from 'events';
import { RequestTypes, ReturnTypes, RequestEvents, RatelimitState } from './types';
import { Client as RestClient } from 'detritus-rest';
export interface ClientOptions {
    baseUrl?: string;
    auth?: string;
    timeout?: number;
}
/**
*  The main client. All fAPI endpoints can be accessed and requested from here.
*/
export declare class Client extends EventEmitter {
    private auth;
    baseUrl: string;
    ratelimitState: RatelimitState;
    restClient: RestClient;
    constructor(options?: ClientOptions);
    /**
    * The most recently returned ratelimit headers, if any.
    */
    get ratelimits(): RatelimitState;
    /**
    * The timeout for every request sent to fAPI.
    */
    get timeout(): number;
    set timeout(value: number);
    /**
    * The main request function. This function is mainly for internal use, since the client already implements this function for every endpoint.
    */
    request(options: RequestTypes.Request): Promise<any>;
    /**
    * The standard internal request function for endpoints that return an image buffer. The request options for each endpoint here are similar, so we can use a function for it.
    */
    fetchImage(endpoint: string, body: any): Promise<Buffer>;
    /**
    * A specific internal request function that handles endpoints that only take an image URL as input and return an image buffer.
    */
    requestImageFromImage(endpoint: string, image: string): Promise<Buffer>;
    /**
    * A specific internal request function that handles endpoints that only take text as input and return an image buffer.
    */
    requestImageFromText(endpoint: string, text: string): Promise<Buffer>;
    /**
    * A specific internal request function that handles endpoints that only takes text and an image URL as inputs and returns an image buffer.
    */
    requestImageFromBoth(endpoint: string, image: string, text: string): Promise<Buffer>;
    getPaths(): Promise<ReturnTypes.PathList>;
    fetch4ChanBoard(options?: RequestTypes._4Chan): Promise<any>;
    _9Gag(image: string): Promise<Buffer>;
    adidas(image: string): Promise<Buffer>;
    adminWalk(image: string): Promise<Buffer>;
    aiMagik(image: string): Promise<Buffer>;
    ajit(image: string): Promise<Buffer>;
    america(image: string): Promise<Buffer>;
    analysis(image: string): Promise<Buffer>;
    austin(image: string): Promise<Buffer>;
    autism(image: string): Promise<Buffer>;
    bandicam(image: string): Promise<Buffer>;
    bernie(image: string): Promise<Buffer>;
    binoculars(image: string): Promise<Buffer>;
    blackify(image: string): Promise<Buffer>;
    blackPanther(image: string): Promise<Buffer>;
    bobRoss(image: string): Promise<Buffer>;
    buzzFeed(text?: string): Promise<Buffer>;
    changeMyMind(text: string): Promise<Buffer>;
    composite(images: string | string[]): Promise<Buffer>;
    consent(image: string, text: string): Promise<Buffer>;
    coolGuy(image: string): Promise<Buffer>;
    days(text: string): Promise<Buffer>;
    deepfry(image: string, strength: number): Promise<Buffer>;
    depression(image: string): Promise<Buffer>;
    disabled(image: string): Promise<Buffer>;
    dork(image: string): Promise<Buffer>;
    duckDuckGo(query: string): Promise<ReturnTypes.DuckDuckGo>;
    duckDuckGoImages(query: string, options?: RequestTypes.DuckDuckGoImages): Promise<string[]>;
    edges(image: string): Promise<Buffer>;
    edges2Emojis(image: string): Promise<Buffer>;
    edges2EmojisGif(image: string): Promise<Buffer>;
    edges2Porn(image: string): Promise<Buffer>;
    edges2PornGif(image: string): Promise<Buffer>;
    emojify(image: string, text: string, foregroundEmoji: string, backgroundEmoji: string, options?: RequestTypes.Emojify): Promise<string>;
    emojiMosaic(image: string, options?: RequestTypes.EmojiMosaic): Promise<Buffer>;
    eval(text: string, options?: RequestTypes.Eval): Promise<string>;
    evalMagik(image: string, text: string | string[]): Promise<Buffer>;
    excuse(image: string): Promise<Buffer>;
    eyes(image: string, overlay: RequestTypes.EyesOverlay): Promise<Buffer>;
    faceDetection(image: string): Promise<ReturnTypes.FaceDetection.Result>;
    faceMagik(image: string, options?: RequestTypes.FaceMagik): Promise<Buffer>;
    faceOverlay(sourceImage: string, overlayImage: string): Promise<Buffer>;
    faceSwap(image: string): Promise<Buffer>;
    gaben(image: string): Promise<Buffer>;
    gay(image: string): Promise<Buffer>;
    glitch(image: string, options?: RequestTypes.Glitch): Promise<Buffer>;
    glow(image: string, options?: RequestTypes.Glow): Promise<Buffer>;
    god(image: string): Promise<Buffer>;
    goldstar(image: string): Promise<Buffer>;
    grill(text: string): Promise<Buffer>;
    hacker(text: string, template: number): Promise<Buffer>;
    hawking(image: string): Promise<Buffer>;
    hyperCam(image: string): Promise<Buffer>;
    iDubbbz(image: string): Promise<Buffer>;
    iFunny(image: string): Promise<Buffer>;
    imageScript(script: string, inject?: RequestTypes.ImageScriptInject): Promise<ReturnTypes.ImageScript>;
    imageTagParser(text: string): Promise<Buffer>;
    index(): Promise<any>;
    israel(image: string): Promise<Buffer>;
    jack(image: string): Promise<Buffer>;
    jackoff(image: string): Promise<Buffer>;
    jesus(image: string): Promise<Buffer>;
    keemstar(image: string): Promise<Buffer>;
    keemstar2(image: string): Promise<Buffer>;
    kekistan(image: string): Promise<Buffer>;
    kirby(image: string): Promise<Buffer>;
    lego(image: string, options?: RequestTypes.Lego): Promise<Buffer>;
    linus(image: string): Promise<Buffer>;
    logan(image: string): Promise<Buffer>;
    logout(text: string): Promise<Buffer>;
    magikScript(image: string, text: string, options?: RequestTypes.MagikScript): Promise<Buffer | null>;
    memorial(text: string): Promise<Buffer>;
    miranda(image: string): Promise<Buffer>;
    mistake(image: string): Promise<Buffer>;
    nooseguy(image: string): Promise<Buffer>;
    northKorea(image: string): Promise<Buffer>;
    oldGuy(image: string): Promise<Buffer>;
    owo(image: string): Promise<Buffer>;
    perfection(image: string): Promise<Buffer>;
    ping(): Promise<number>;
    pistol(image: string): Promise<Buffer>;
    pixelate(image: string, options?: RequestTypes.Pixelate): Promise<Buffer>;
    pne(image: string, options?: RequestTypes.Pne): Promise<Buffer>;
    pornhub(image: string, text: string): Promise<Buffer>;
    portal(image: string): Promise<Buffer>;
    presidential(text: string): Promise<Buffer>;
    proxy(url: string, reqBody: any): Promise<any>;
    quote(options: RequestTypes.Quote.Quote): Promise<Buffer>;
    racecard(light: string, dark: string): Promise<Buffer>;
    realFact(text: string): Promise<Buffer>;
    recaptcha(text: string): Promise<Buffer>;
    reminder(image: string, text: string): Promise<Buffer>;
    resize(image: string): Promise<Buffer>;
    respects(image: string): Promise<Buffer>;
    retro(image: string, text: string): Promise<Buffer>;
    rexTester(language: string, code: string): Promise<string>;
    rtx(before: string, after: string): Promise<Buffer>;
    russia(image: string): Promise<Buffer>;
    screenshot(url: string, options?: RequestTypes.Screenshot): Promise<Buffer>;
    shit(image: string): Promise<Buffer>;
    shooting(image: string, text: string): Promise<Buffer>;
    shotgun(image: string): Promise<Buffer>;
    simpsonsDisabled(text: string): Promise<Buffer>;
    smg(image: string): Promise<Buffer>;
    snapchat(image: string, options?: RequestTypes.Snapchat): Promise<Buffer>;
    sonic(text: string): Promise<Buffer>;
    spain(image: string): Promise<Buffer>;
    starman(image: string): Promise<Buffer>;
    steamPlaying(game: string): Promise<string>;
    stock(image: string): Promise<Buffer>;
    supreme(image: string): Promise<Buffer>;
    thinking(image: string, options?: RequestTypes.Thinking): Promise<Buffer>;
    thonkify(text: string): Promise<Buffer>;
    trans(image: string): Promise<Buffer>;
    trump(image: string): Promise<Buffer>;
    ugly(image: string): Promise<Buffer>;
    uk(image: string): Promise<Buffer>;
    unmagik(image: string): Promise<Buffer>;
    urbanDictionary(query: string): Promise<ReturnTypes.UrbanDictionary>;
    urlify(url: string): Promise<string>;
    ussr(image: string): Promise<Buffer>;
    vending(image: string): Promise<Buffer>;
    watchMojo(image: string, text: string): Promise<Buffer>;
    wheeze(image: string): Promise<Buffer>;
    wikiHow(query: string): Promise<any>;
    wonka(text: string): Promise<Buffer>;
    wth(image: string): Promise<Buffer>;
    yusuke(image: string): Promise<Buffer>;
    zoom(image: string): Promise<Buffer>;
    zuckerberg(image: string): Promise<Buffer>;
    on(event: RequestEvents.Events, listener: (...args: any[]) => void): this;
}
