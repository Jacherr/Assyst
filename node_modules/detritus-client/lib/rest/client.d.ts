import { Client, ClientOptions, RequestTypes } from 'detritus-client-rest';
import { ShardClient } from '../client';
import { BaseCollection } from '../collections/basecollection';
import { Application, ApplicationNews, AuditLog, Channel, ChannelDM, ConnectedAccount, Emoji, Gift, Guild, GuildMe, Integration, Invite, Member, Message, Oauth2Application, Oauth2ApplicationAsset, PremiumSubscription, Profile, Role, StoreApplicationAsset, StoreListing, Team, TeamMember, Template, User, UserMe, VoiceRegion, Webhook } from '../structures';
import { RestResponses } from './types';
export declare class RestClient {
    readonly client: ShardClient;
    readonly raw: Client;
    constructor(token: string, options: ClientOptions, client: ShardClient);
    get isBot(): boolean;
    get isUser(): boolean;
    setAuthType(type: string | number): void;
    request(info: RequestTypes.Options | string | URL, init?: RequestTypes.Options): Promise<any>;
    delete(info: RequestTypes.Options | string | URL, init?: RequestTypes.Options): Promise<import("detritus-rest").Response>;
    get(info: RequestTypes.Options | string | URL, init?: RequestTypes.Options): Promise<import("detritus-rest").Response>;
    head(info: RequestTypes.Options | string | URL, init?: RequestTypes.Options): Promise<import("detritus-rest").Response>;
    options(info: RequestTypes.Options | string | URL, init?: RequestTypes.Options): Promise<import("detritus-rest").Response>;
    patch(info: RequestTypes.Options | string | URL, init?: RequestTypes.Options): Promise<import("detritus-rest").Response>;
    put(info: RequestTypes.Options | string | URL, init?: RequestTypes.Options): Promise<import("detritus-rest").Response>;
    acceptAgreements(privacy?: boolean, terms?: boolean): Promise<any>;
    acceptInvite(code: string): Promise<any>;
    acceptTeamInvite(token: string): Promise<any>;
    ackChannelMessage(channelId: string, messageId: string, token: string): Promise<any>;
    ackChannelPins(channelId: string): Promise<any>;
    ackGuild(guildId: string): Promise<any>;
    acceptTemplate(templateId: string, options: RequestTypes.AcceptTemplate): Promise<Guild>;
    activateOauth2ApplicationLicense(applicationId: string, options: RequestTypes.ActivateOauth2ApplicationLicense): Promise<any>;
    addConnection(platform: string, accountId: string, options: RequestTypes.AddConnection): Promise<any>;
    addGuildMember(guildId: string, userId: string, options: RequestTypes.AddGuildMember): Promise<any>;
    addGuildMemberRole(guildId: string, userId: string, roleId: string, options?: RequestTypes.AddGuildMemberRole): Promise<any>;
    addPinnedMessage(channelId: string, messageId: string): Promise<any>;
    addRecipient(channelId: string, userId: string): Promise<any>;
    addOauth2ApplicationWhitelistUser(applicationId: string, options: RequestTypes.AddOauth2ApplicationWhitelistUser): Promise<any>;
    addTeamMember(teamId: string, options: RequestTypes.AddTeamMember): Promise<any>;
    authorizeIpAddress(options: RequestTypes.AuthorizeIpAddress): Promise<any>;
    beginGuildPrune(guildId: string, options?: RequestTypes.BeginGuildPrune): Promise<any>;
    bulkDeleteMessages(channelId: string, messageIds: Array<string>): Promise<any>;
    connectionCallback(platform: string, options: RequestTypes.ConnectionCallback): Promise<any>;
    createApplicationNews(options: RequestTypes.CreateApplicationNews): Promise<ApplicationNews>;
    createChannelInvite(channelId: string, options?: RequestTypes.CreateChannelInvite): Promise<Invite>;
    createChannelStoreListingGrantEntitlement(channelId: string): Promise<any>;
    createDm(options?: RequestTypes.CreateDm): Promise<ChannelDM>;
    createGuild(options: RequestTypes.CreateGuild): Promise<Guild>;
    createGuildBan(guildId: string, userId: string, options?: RequestTypes.CreateGuildBan): Promise<any>;
    createGuildChannel(guildId: string, options: RequestTypes.CreateGuildChannel, updateCache?: boolean): Promise<Channel>;
    createGuildEmoji(guildId: string, options: RequestTypes.CreateGuildEmoji, updateCache?: boolean): Promise<Emoji>;
    createGuildIntegration(guildId: string, options: RequestTypes.CreateGuildIntegration): Promise<any>;
    createGuildRole(guildId: string, options?: RequestTypes.CreateGuildRole): Promise<Role>;
    createGuildTemplate(guildId: string, options: RequestTypes.CreateGuildTemplate): Promise<Template>;
    createLobby(applicationId: string, options?: RequestTypes.CreateLobby): Promise<any>;
    createMeBillingPaymentSource(options: RequestTypes.CreateMeBillingPaymentSource): Promise<any>;
    createMeBillingSubscription(options: RequestTypes.CreateMeBillingSubscription): Promise<any>;
    createMessage(channelId: string, options?: RequestTypes.CreateMessage | string): Promise<Message>;
    createOauth2Application(options: RequestTypes.CreateOauth2Application): Promise<any>;
    createOauth2ApplicationAsset(applicationId: string, options: RequestTypes.CreateOauth2ApplicationAsset): Promise<Oauth2ApplicationAsset>;
    createOauth2ApplicationBot(applicationId: string): Promise<any>;
    createReaction(channelId: string, messageId: string, emoji: string): Promise<any>;
    createStoreApplicationAsset(applicationId: string, options: RequestTypes.CreateStoreApplicationAsset): Promise<StoreApplicationAsset>;
    createTeam(options?: RequestTypes.CreateTeam): Promise<any>;
    createWebhook(channelId: string, options: RequestTypes.CreateWebhook): Promise<Webhook>;
    deleteAccount(options: RequestTypes.DeleteAccount): Promise<any>;
    deleteChannel(channelId: string, options?: RequestTypes.DeleteChannel): Promise<Channel>;
    deleteChannelOverwrite(channelId: string, overwriteId: string, options?: RequestTypes.DeleteChannelOverwrite): Promise<any>;
    deleteConnection(platform: string, accountId: string): Promise<any>;
    deleteGuild(guildId: string, options?: RequestTypes.DeleteGuild): Promise<any>;
    deleteGuildEmoji(guildId: string, emojiId: string, options?: RequestTypes.DeleteGuildEmoji): Promise<any>;
    deleteGuildIntegration(guildId: string, integrationId: string, options?: RequestTypes.DeleteGuildIntegration): Promise<any>;
    deleteGuildPremiumSubscription(guildId: string, subscriptionId: string): Promise<any>;
    deleteGuildRole(guildId: string, roleId: string, options?: RequestTypes.DeleteGuildRole): Promise<any>;
    deleteGuildTemplate(guildId: string, templateId: string): Promise<any>;
    deleteInvite(code: string, options?: RequestTypes.DeleteInvite): Promise<Invite>;
    deleteLobby(lobbyId: string): Promise<any>;
    deleteMeBillingPaymentSource(paymentSourceId: string): Promise<any>;
    deleteMeBillingSubscription(subscriptionId: string): Promise<any>;
    deleteMessage(channelId: string, messageId: string, options?: RequestTypes.DeleteMessage): Promise<any>;
    deleteOauth2Application(applicationId: string, options?: RequestTypes.DeleteOauth2Application): Promise<any>;
    deleteOauth2ApplicationAsset(applicationId: string, assetId: string): Promise<any>;
    deletePinnedMessage(channelId: string, messageId: string): Promise<any>;
    deleteReactions(channelId: string, messageId: string): Promise<any>;
    deleteReactionsEmoji(channelId: string, messageId: string, emoji: string): Promise<any>;
    deleteReaction(channelId: string, messageId: string, emoji: string, userId?: string): Promise<any>;
    deleteRelationship(userId: string): Promise<any>;
    deleteStoreApplicationAsset(applicationId: string, assetId: string): Promise<any>;
    deleteTeam(teamId: string, options?: RequestTypes.DeleteTeam): Promise<any>;
    deleteWebhook(webhookId: string, options?: RequestTypes.DeleteWebhook): Promise<any>;
    deleteWebhookToken(webhookId: string, token: string, options?: RequestTypes.DeleteWebhook): Promise<any>;
    disableAccount(options: RequestTypes.DisableAccount): Promise<any>;
    editApplicationNews(newsId: string, options?: RequestTypes.EditApplicationNews): Promise<any>;
    editChannel(channelId: string, options?: RequestTypes.EditChannel, updateCache?: boolean): Promise<Channel>;
    editChannelOverwrite(channelId: string, overwriteId: string, options?: RequestTypes.EditChannelOverwrite): Promise<any>;
    editConnection(platform: string, accountId: string, options?: RequestTypes.EditConnection): Promise<any>;
    editGuild(guildId: string, options?: RequestTypes.EditGuild, updateCache?: boolean): Promise<Guild>;
    editGuildChannels(guildId: string, channels: RequestTypes.EditGuildChannels, options?: RequestTypes.EditGuildChannelsExtra): Promise<any>;
    editGuildEmbed(guildId: string, options: RequestTypes.EditGuildEmbed): Promise<any>;
    editGuildEmoji(guildId: string, emojiId: string, options?: RequestTypes.EditGuildEmoji, updateCache?: boolean): Promise<Emoji>;
    editGuildIntegration(guildId: string, integrationId: string, options?: RequestTypes.EditGuildIntegration): Promise<any>;
    editGuildMember(guildId: string, userId: string, options?: RequestTypes.EditGuildMember): Promise<any>;
    editGuildMfaLevel(guildId: string, options: RequestTypes.EditGuildMfaLevel): Promise<any>;
    editGuildNick(guildId: string, nick: string, options?: RequestTypes.EditGuildNick): Promise<any>;
    editGuildRole(guildId: string, roleId: string, options?: RequestTypes.EditGuildRole, updateCache?: boolean): Promise<Role>;
    editGuildRolePositions(guildId: string, roles: RequestTypes.EditGuildRolePositions, options?: RequestTypes.EditGuildRolePositionsExtra, updateCache?: boolean): Promise<BaseCollection<string, Role>>;
    editGuildVanity(guildId: string, code: string, options?: RequestTypes.EditGuildVanity): Promise<any>;
    editLobby(lobbyId: string, options?: RequestTypes.EditLobby): Promise<any>;
    editLobbyMember(lobbyId: string, userId: string, options?: RequestTypes.EditLobbyMember): Promise<any>;
    editMe(options?: RequestTypes.EditMe, updateCache?: boolean): Promise<UserMe>;
    editMeBillingPaymentSource(paymentSourceId: string, options?: RequestTypes.EditMeBillingPaymentSource): Promise<any>;
    editMeBillingSubscription(subscriptionId: string, options?: RequestTypes.EditMeBillingSubscription): Promise<any>;
    editMessage(channelId: string, messageId: string, options?: RequestTypes.EditMessage | string, updateCache?: boolean): Promise<Message>;
    editNote(userId: string, note: string): Promise<any>;
    editOauth2Application(applicationId: string, options?: RequestTypes.EditOauth2Application): Promise<any>;
    editRelationship(userId: string, type: number): Promise<any>;
    editSettings(options?: RequestTypes.EditSettings): Promise<any>;
    editTeam(teamId: string, options?: RequestTypes.EditTeam): Promise<any>;
    editUser(options?: RequestTypes.EditMe): Promise<UserMe>;
    editWebhook(webhookId: string, options?: RequestTypes.EditWebhook): Promise<Webhook>;
    editWebhookToken(webhookId: string, token: string, options?: RequestTypes.EditWebhook): Promise<Webhook>;
    enableOauth2ApplicationAssets(applicationId: string): Promise<any>;
    enableOauth2ApplicationRpc(applicationId: string): Promise<any>;
    executeWebhook(webhookId: string, token: string, options?: RequestTypes.ExecuteWebhook | string, compatibleType?: string): Promise<Message | null>;
    fetchActivities(): Promise<any>;
    fetchApplicationNews(applicationIds?: Array<string> | string): Promise<BaseCollection<string, ApplicationNews>>;
    fetchApplicationNewsId(newsId: string): Promise<ApplicationNews>;
    fetchApplications(): Promise<any>;
    fetchApplication(applicationId: string): Promise<Application>;
    fetchApplicationsDetectable(): Promise<BaseCollection<string, Application>>;
    fetchApplicationsPublic(applicationIds: string | Array<string>): Promise<any>;
    fetchApplicationsTrendingGlobal(): Promise<any>;
    fetchAuthConsentRequired(): Promise<any>;
    fetchChannel(channelId: string, updateCache?: boolean): Promise<Channel>;
    fetchChannelCall(channelId: string): Promise<any>;
    fetchChannelInvites(channelId: string): Promise<BaseCollection<string, Invite>>;
    fetchChannelStoreListing(channelId: string): Promise<StoreListing>;
    fetchChannelWebhooks(channelId: string): Promise<BaseCollection<string, Webhook>>;
    fetchConsentRequired(): Promise<any>;
    fetchConnectionAuthorizeUrl(platform: string): Promise<any>;
    fetchDiscoverableGuilds(): Promise<any>;
    fetchDms(userId?: string, updateCache?: boolean): Promise<BaseCollection<string, Channel>>;
    fetchExperiments(fingerprint?: string): Promise<any>;
    fetchGateway(): Promise<any>;
    fetchGatewayBot(): Promise<any>;
    fetchGiftCode(code: string, options?: RequestTypes.FetchGiftCode): Promise<Gift>;
    fetchGuild(guildId: string, updateCache?: boolean): Promise<Guild>;
    fetchGuildApplications(guildId: string, channelId?: string): Promise<any>;
    fetchGuildAuditLogs(guildId: string, options?: RequestTypes.FetchGuildAuditLogs): Promise<BaseCollection<string, AuditLog>>;
    fetchGuildBans(guildId: string): Promise<RestResponses.FetchGuildBans>;
    fetchGuildChannels(guildId: string): Promise<BaseCollection<string, Channel>>;
    fetchGuildEmbed(guildId: string): Promise<any>;
    fetchGuildEmojis(guildId: string): Promise<BaseCollection<string, Emoji>>;
    fetchGuildEmoji(guildId: string, emojiId: string): Promise<Emoji>;
    fetchGuildIntegrations(guildId: string): Promise<BaseCollection<string, Integration>>;
    fetchGuildInvites(guildId: string): Promise<BaseCollection<string, Invite>>;
    fetchGuildMembers(guildId: string, options?: RequestTypes.FetchGuildMembers): Promise<BaseCollection<string, Member>>;
    fetchGuildMembersSearch(guildId: string, options: RequestTypes.FetchGuildMembersSearch): Promise<BaseCollection<string, Member>>;
    fetchGuildMember(guildId: string, userId: string): Promise<Member>;
    fetchGuildPremiumSubscriptions(guildId: string): Promise<BaseCollection<string, PremiumSubscription>>;
    fetchGuildPreview(guildId: string): Promise<any>;
    fetchGuildPruneCount(guildId: string, options?: RequestTypes.FetchGuildPruneCount): Promise<any>;
    fetchGuildRoles(guildId: string): Promise<BaseCollection<string, Role>>;
    fetchGuildTemplates(guildId: string): Promise<BaseCollection<string, Template>>;
    fetchGuildVanityUrl(guildId: string): Promise<any>;
    fetchGuildWebhooks(guildId: string): Promise<BaseCollection<string, Webhook>>;
    fetchGuildWidget(guildId: string): Promise<any>;
    fetchGuildWidgetJson(guildId: string): Promise<any>;
    fetchGuildWidgetPng(guildId: string, options?: RequestTypes.FetchGuildWidgetPng): Promise<any>;
    fetchInvite(code: string, options?: RequestTypes.FetchInvite): Promise<Invite>;
    fetchMe(options?: RequestTypes.FetchMe): Promise<UserMe>;
    fetchMeBillingPaymentSources(): Promise<any>;
    fetchMeBillingPayments(options?: RequestTypes.FetchMeBillingPayments): Promise<any>;
    fetchMeBillingSubscriptions(): Promise<any>;
    fetchMeChannels(): Promise<BaseCollection<string, Channel>>;
    fetchMeConnections(): Promise<BaseCollection<string, ConnectedAccount>>;
    fetchMeConnectionAccessToken(platform: string, accountId: string): Promise<any>;
    fetchMeConnectionSubreddits(accountId: string): Promise<any>;
    fetchMeFeedSettings(options?: RequestTypes.FetchMeFeedSettings): Promise<any>;
    fetchMeGuilds(options?: RequestTypes.FetchMeGuilds): Promise<BaseCollection<string, GuildMe>>;
    fetchMentions(options?: RequestTypes.FetchMentions): Promise<BaseCollection<string, Message>>;
    fetchMessage(channelId: string, messageId: string): Promise<Message>;
    fetchMessages(channelId: string, options?: RequestTypes.FetchMessages): Promise<BaseCollection<string, Message>>;
    fetchOauth2Applications(): Promise<BaseCollection<string, Oauth2Application>>;
    fetchOauth2Application(userId?: string): Promise<Oauth2Application>;
    fetchOauth2ApplicationAssets(applicationId: string): Promise<BaseCollection<string, Oauth2ApplicationAsset>>;
    fetchOauth2ApplicationWhitelist(applicationId: string): Promise<any>;
    fetchOauth2Authorize(options?: RequestTypes.FetchOauth2Authorize): Promise<any>;
    fetchOauth2AuthorizeWebhookChannels(guildId: string): Promise<any>;
    fetchOauth2Tokens(): Promise<any>;
    fetchOauth2Token(tokenId: string): Promise<any>;
    fetchPinnedMessages(channelId: string): Promise<BaseCollection<string, Message>>;
    fetchReactions(channelId: string, messageId: string, emoji: string, options?: RequestTypes.FetchReactions): Promise<BaseCollection<string, User>>;
    fetchStoreApplicationAssets(applicationId: string): Promise<BaseCollection<string, StoreApplicationAsset>>;
    fetchStorePublishedListingsSkus(applicationId: string): Promise<any>;
    fetchStorePublishedListingsSku(skuId: string): Promise<any>;
    fetchStorePublishedListingsSkuSubscriptionPlans(skuId: string): Promise<any>;
    fetchStreamPreview(streamKey: string): Promise<any>;
    fetchTeams(): Promise<BaseCollection<string, Team>>;
    fetchTeam(teamId: string): Promise<Team>;
    fetchTeamApplications(teamId: string): Promise<any>;
    fetchTeamMembers(teamId: string): Promise<BaseCollection<string, TeamMember>>;
    fetchTeamMember(teamId: string, userId: string): Promise<TeamMember>;
    fetchTeamPayouts(teamId: string, options?: RequestTypes.FetchTeamPayouts): Promise<any>;
    fetchTemplate(templateId: string): Promise<Template>;
    fetchUser(userId: string): Promise<User>;
    fetchUserActivityMetadata(userId: string, sessionId: string, activityId: string): Promise<any>;
    fetchUserChannels(userId: string): Promise<BaseCollection<string, Channel>>;
    fetchUserProfile(userId: string): Promise<Profile>;
    fetchVoiceIce(): Promise<any>;
    fetchVoiceRegions(guildId?: string): Promise<BaseCollection<string, VoiceRegion>>;
    fetchWebhook(webhookId: string): Promise<Webhook>;
    fetchWebhookToken(webhookId: string, token: string): Promise<Webhook>;
    forgotPassword(options: RequestTypes.ForgotPassword): Promise<any>;
    integrationJoin(integrationId: string): Promise<any>;
    joinGuild(guildId: string, options?: RequestTypes.JoinGuild): Promise<any>;
    leaveGuild(guildId: string): Promise<any>;
    login(options: RequestTypes.Login): Promise<any>;
    loginMfaSms(options: RequestTypes.LoginMfaSms): Promise<any>;
    loginMfaSmsSend(options: RequestTypes.LoginMfaSmsSend): Promise<any>;
    loginMfaTotp(options: RequestTypes.LoginMfaTotp): Promise<any>;
    logout(options?: RequestTypes.Logout): Promise<any>;
    messageSuppressEmbeds(channelId: string, messageId: string, options?: RequestTypes.MessageSuppressEmbeds): Promise<any>;
    oauth2Authorize(options?: RequestTypes.Oauth2Authorize): Promise<any>;
    redeemGiftCode(code: string, options?: RequestTypes.RedeemGiftCode): Promise<any>;
    register(options: RequestTypes.Register): Promise<any>;
    removeGuildBan(guildId: string, userId: string, options?: RequestTypes.RemoveGuildBan): Promise<any>;
    removeGuildMember(guildId: string, userId: string, options?: RequestTypes.RemoveGuildMember): Promise<any>;
    removeGuildMemberRole(guildId: string, userId: string, roleId: string, options?: RequestTypes.RemoveGuildMemberRole): Promise<any>;
    removeMention(messageId: string): Promise<any>;
    removeOauth2ApplicationWhitelistUser(applicationId: string, userId: string): Promise<any>;
    removeRecipient(channelId: string, userId: string): Promise<any>;
    removeTeamMember(teamId: string, userId: string): Promise<any>;
    resetOauth2Application(applicationId: string): Promise<any>;
    resetOauth2ApplicationBot(applicationId: string): Promise<any>;
    resetPassword(options: RequestTypes.ResetPassword): Promise<any>;
    resetPasswordMfa(options: RequestTypes.ResetPasswordMfa): Promise<any>;
    search(searchType: 'channel' | 'guild', searchId: string, options?: RequestTypes.SearchOptions, retry?: boolean, retryNumber?: number): Promise<any>;
    searchChannel(channelId: string, options?: RequestTypes.SearchOptions, retry?: boolean, retryNumber?: number): Promise<any>;
    searchGuild(guildId: string, options?: RequestTypes.SearchOptions, retry?: boolean, retryNumber?: number): Promise<any>;
    searchLobbies(applicationId: string, options?: RequestTypes.SearchLobbies): Promise<any>;
    sendDownloadText(number: string): Promise<any>;
    sendFriendRequest(options: RequestTypes.SendFriendRequest): Promise<any>;
    sendLobbyData(lobbyId: string, data: string): Promise<any>;
    startChannelCallRinging(channelId: string, options?: RequestTypes.StartChannelCallRinging): Promise<any>;
    stopChannelCallRinging(channelId: string, options?: RequestTypes.StopChannelCallRinging): Promise<any>;
    submitConnectionPinCode(platform: string, pin: string): Promise<any>;
    submitOauth2ApplicationApproval(applicationId: string): Promise<any>;
    syncGuildIntegration(guildId: string, integrationId: string): Promise<any>;
    transferOauth2Application(applicationId: string, options: RequestTypes.TransferOauth2Application): Promise<any>;
    triggerTyping(channelId: string): Promise<any>;
    unAckChannel(channelId: string): Promise<any>;
    verify(options: RequestTypes.Verify): Promise<any>;
    verifyCaptcha(options: RequestTypes.VerifyCaptcha): Promise<any>;
    verifyResend(): Promise<any>;
}
